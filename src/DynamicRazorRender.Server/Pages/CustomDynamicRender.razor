@using DynamicRazorRender.Shared;
@using Microsoft.JSInterop;
@using Masa.Blazor.Extensions.Languages.Razor;
@using Microsoft.AspNetCore.Components;
@using DynamicRazorRender.Server.Events;
@implements IDisposable

@if (componentType == null)
{
    <h1>Loading...</h1>
}
else
{
    <MApp>
        <DynamicComponent Type="componentType"></DynamicComponent>
    </MApp>
}

@code {

    protected Type? componentType;

    [Inject]
    protected EventBus<string>? _eventCenter { get; set; }

    [Inject]
    protected IJSRuntime? _jsRuntime { get; set; }

    [Inject]
    protected IServiceProvider? _serviceProvider { get; set; }

    [Inject]
    private ILogger<CustomDynamicRender>? _logger { get; set; }

    protected override void OnInitialized()
    {
        RegisterEventBus();
        base.OnInitialized();
    }

    private List<Subscription?> subscriptions {get;set;} = new List<Subscription?>();

    protected void RegisterEventBus()
    {        
        var subscription1 = _eventCenter?.Subscribe(CustomEventConstants.RenderFromFile, async (filepath) => {
            try 
            {
                if(string.IsNullOrWhiteSpace(filepath))
                {
                    throw new ArgumentNullException(nameof(filepath), "路径为空");
                }

                if(!File.Exists(filepath)){
                    throw new FileNotFoundException("文件不存在", filepath);
                }

                string? code;
                using(var stream = new FileStream(filepath, FileMode.Open, FileAccess.Read))
                {
                    using(var reader = new StreamReader(stream))
                    {
                        code = await reader.ReadToEndAsync();
                    }
                }
                        
                CompileCode(code);
            }
            catch(Exception ex)
            {
                _logger?.LogWarning(ex.ToString());
                await PostError(ex);
            }
        });

        this.subscriptions.Add(subscription1);

        var subscription2 =  _eventCenter?.Subscribe(CustomEventConstants.RenderFromPlain, async (plainText) => {
            try
            {
                CompileCode(plainText);
            }
            catch(Exception ex)
            {
                await PostError(ex);
            }   
        });

        this.subscriptions.Add(subscription2);
    }

    protected void CompileCode(string code){
        componentType = RazorCompile.CompileToType(
            new CompileRazorOptions{
                Code = code,
                ConcurrentBuild = false,
            }
        );

        _ = InvokeAsync(StateHasChanged);
    }

    protected async Task PostError(Exception ex){
        await _jsRuntime!.InvokeVoidAsync(
            "window.postMessage",
            new {
                type = "error",
                message = ex.Message,
                details = ex.ToString()
            }
        );
    }

    public void Dispose()
    {
        foreach(var subscription in subscriptions){
            if(subscription != null){
                _eventCenter?.UnSubscribe(subscription);
            }
        }
    }
}
@* #pragma warning restore 1998
#nullable restore
#line 4 "d:/Playground/repos/DynamicRenderRazorDemoInJs/src/DynamicRazorRender.Server/Pages/CustomDynamicRender.razor" *@





